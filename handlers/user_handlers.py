from aiogram import Bot, Router, F, types
from aiogram.filters import CommandStart, Command, or_f
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, ReplyKeyboardRemove, FSInputFile

from keyboards.user_kb import share_number_phone_kb, select_service_kb, select_serv_kb, select_time_serv_kb, confirm_or_cancel_kb, main_kb, after_kb, my_sel_serv_kb
from db.db import insert_data_db, insert_user_phone, sel_serv, select_time, select_date_serv, show_info, confirm_service, cancel_service, check_time
from lexicon.lexicon_ru import services

from datetime import datetime
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, DialogCalendar, DialogCalendarCallback, get_user_locale


user_router = Router()

@user_router.message(CommandStart())
async def start_command(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    date = datetime.now()
    phone = None
    await insert_data_db(user_id, first_name, last_name, username, phone, date)
    await message.answer(text='''<b>–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞üå∏</b>

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò—Ä–∏–Ω–∞, —è —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä –±—Ä–æ–≤–∏—Å—Ç , —Å—Ç—Ä–∞—Å—Ç–Ω–æ —É–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–æ–º —É—Ö–æ–¥–∞ –∑–∞ –±—Ä–æ–≤—è–º–∏)
–ú–æ—è —Ü–µ–ª—å- –ø–æ–º–æ—á—å –í–∞–º –¥–æ—Å—Ç–∏—á—å –∏–¥–µ–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –±—Ä–æ–≤–µ–π)

–í –º–æ–µ–π —Ä–∞–±–æ—Ç–µ —è –∏—Å–ø–æ–ª—å–∑—É—é —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç. 
–ú–æ—è —Ü–µ–ª—å- –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –±—Ä–æ–≤–∏, –Ω–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –í–∞–º –ø—Ä–∏—è—Ç–Ω–æ–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.

<u>–ñ–¥—É –í–∞—Å –∑–∞ –∫—Ä–∞—Å–∏–≤—ã–º–∏ –±—Ä–æ–≤—è–º–∏</u> üòª
üì≤89025385699 <i>Viber/ What‚Äôs App/ Telegram</i>
<a href="https://vk.com/fomina_brow">–ó–∞–≥–ª—è–Ω–∏ –≤ –º–æ—é –≥—Ä—É–ø–ø—É –í–ö</a>''', reply_markup=share_number_phone_kb)
    await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É...')
    
# simple calendar usage - filtering callbacks of calendar format
@user_router.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: CallbackData):
    calendar = SimpleCalendar(
        locale=await get_user_locale(callback_query.from_user), show_alerts=True
    )
    calendar.set_dates_range(datetime(2024, 2, 1), datetime(2024, 12, 31))
    selected, date = await calendar.process_selection(callback_query, callback_data)
    # print(date)
    # print(datetime.now())
    if selected:
        if date >= datetime.now():
            await select_date_serv(user_id=callback_query.from_user.id, select_date=date.strftime("%d/%m/%Y"))
            await callback_query.message.answer(
                f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {date.strftime("%d/%m/%Y")}',
                reply_markup=select_time_serv_kb
            )
        else:
            await callback_query.message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º–∞—à–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏ –µ—â–µ –Ω–µ –∏–∑–æ–±—Ä–µ–ª–∏ =)\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É:', reply_markup=select_serv_kb)
        
@user_router.callback_query()
async def follow_on_uslugi(callback_query: CallbackQuery, bot: Bot):
    if callback_query.data == 'follow':
        await bot.send_message(chat_id=callback_query.from_user.id, text='Its a 1st callback')
        await callback_query.answer("It's a callback", show_alert=True)

    if callback_query.data == 'correction':
        await sel_serv(user_id=callback_query.from_user.id, sel_serv='–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –±—Ä–æ–≤–µ–π')
        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–æ—Ä—Ä–µ–∫—Ü–∏—è\n400 ‚ÇΩ', reply_markup=select_serv_kb)
        await callback_query.answer(f"–ö–æ—Ä—Ä–µ–∫—Ü–∏—è\n400 ‚ÇΩ\n{services.get('correction')}", show_alert=True)
    if callback_query.data == 'corr_paint':
        await sel_serv(user_id=callback_query.from_user.id, sel_serv='–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ')
        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ\nReady in 1 hour\n750 ‚ÇΩ', reply_markup=select_serv_kb)
        await callback_query.answer(f"–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ\nReady in 1 hour\n750 ‚ÇΩ\n{services.get('correction')}", show_alert=True)
    if callback_query.data == 'corr_styling':
        await sel_serv(user_id=callback_query.from_user.id, sel_serv='–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —É–∫–ª–∞–¥–∫–∞')
        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —É–∫–ª–∞–¥–∫–∞\nReady in 1 hour\n1,000 ‚ÇΩ', reply_markup=select_serv_kb)
        await callback_query.answer(f"–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —É–∫–ª–∞–¥–∫–∞\nReady in 1 hour\n1,000 ‚ÇΩ\n{services.get('correction')}", show_alert=True)
    if callback_query.data == 'corr_pain_styl':
        await sel_serv(user_id=callback_query.from_user.id, sel_serv='–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —Å –î–£')
        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —Å –î–£\nReady in 2 hours\n1,400 ‚ÇΩ', reply_markup=select_serv_kb)
        await callback_query.answer(f"–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —Å –î–£\nReady in 2 hours\n1,400 ‚ÇΩ\n{services.get('correction')}", show_alert=True)
    if callback_query.data == 'del_hair':
        await sel_serv(user_id=callback_query.from_user.id, sel_serv='–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—à–∫–∞')
        await bot.send_message(chat_id=callback_query.from_user.id, text='–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—à–∫–∞\nReady in 30 minutes\n200 ‚ÇΩ', reply_markup=select_serv_kb)
        await callback_query.answer(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—à–∫–∞\nReady in 30 minutes\n200 ‚ÇΩ\n{services.get('correction')}", show_alert=True)
    if callback_query.data == 'lash':
        await sel_serv(user_id=callback_query.from_user.id, sel_serv='–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü')
        await bot.send_message(chat_id=callback_query.from_user.id, text='–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü\nReady in 30 minutes\n1100 ‚ÇΩ', reply_markup=select_serv_kb)
        await callback_query.answer(f"–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü\nReady in 30 minutes\n1100 ‚ÇΩ\n{services.get('correction')}", show_alert=True)

    if callback_query.data == 'sel_date':
        await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:', reply_markup=await SimpleCalendar(locale=await get_user_locale(callback_query.from_user)).start_calendar())

    if callback_query.data == '9:00':
        await select_time(user_id=callback_query.from_user.id, time_serv='9:00')
        if await check_time(user_id=callback_query.from_user.id):
            await callback_query.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è!', reply_markup=select_time_serv_kb)
        else:
            usluga = await show_info(user_id=callback_query.from_user.id)
            await bot.send_message(chat_id=callback_query.from_user.id, 
                               text=f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å: {usluga}', reply_markup=confirm_or_cancel_kb)
    if callback_query.data == '11:30':
        await select_time(user_id=callback_query.from_user.id, time_serv='11:30')
        if await check_time(user_id=callback_query.from_user.id):
            await callback_query.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è!', reply_markup=select_time_serv_kb)
        else:
            usluga = await show_info(user_id=callback_query.from_user.id)
            await bot.send_message(chat_id=callback_query.from_user.id, 
                               text=f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å: {usluga}', reply_markup=confirm_or_cancel_kb)
    if callback_query.data == '13:30':
        await select_time(user_id=callback_query.from_user.id, time_serv='13:30')
        if await check_time(user_id=callback_query.from_user.id):
            await callback_query.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è!', reply_markup=select_time_serv_kb)
        else:
            usluga = await show_info(user_id=callback_query.from_user.id)
            await bot.send_message(chat_id=callback_query.from_user.id, 
                               text=f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å: {usluga}', reply_markup=confirm_or_cancel_kb)
    if callback_query.data == '15:30':
        await select_time(user_id=callback_query.from_user.id, time_serv='15:30')
        if await check_time(user_id=callback_query.from_user.id):
            await callback_query.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è!', reply_markup=select_time_serv_kb)
        else:
            usluga = await show_info(user_id=callback_query.from_user.id)
            await bot.send_message(chat_id=callback_query.from_user.id, 
                               text=f'–í–∞—à–∞ –∑–∞–ø–∏—Å—å: {usluga}', reply_markup=confirm_or_cancel_kb)

    if callback_query.data == 'confirm_service':
        usluga = await show_info(user_id=callback_query.from_user.id)
        await callback_query.answer(text=f'–ë—É–¥—É —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –í–∞—Å –≤ —Å–∞–ª–æ–Ω–µ, –ø–æ –∞–¥—Ä–µ—Å—É: –ë–∞–ª—Ç–∞—Ö–∏–Ω–æ–≤–∞ 17, 206 –æ—Ñ–∏—Å.\n{usluga[0][1]+usluga[0][2]}', show_alert=True)
        await bot.send_message(chat_id=callback_query.from_user.id, text=f'–ë—É–¥—É —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –í–∞—Å –≤ —Å–∞–ª–æ–Ω–µ, –ø–æ –∞–¥—Ä–µ—Å—É: –ë–∞–ª—Ç–∞—Ö–∏–Ω–æ–≤–∞ 17, 206 –æ—Ñ–∏—Å.\n{usluga[0][1]+usluga[0][2]}', reply_markup=after_kb)
        await confirm_service(user_id=callback_query.from_user.id)

    if callback_query.data == 'cancel_service':
        await bot.send_message(chat_id=callback_query.from_user.id, text='–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É –∏ –¥–∞—Ç—É, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É)', reply_markup=main_kb)
        await cancel_service(user_id=callback_query.from_user.id)

@user_router.message(F.contact)
async def update_phone(message: types.Message):
    photo = FSInputFile(path='service.jpg')
    await insert_user_phone(phone=message.contact.phone_number, id=message.from_user.id)
    await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö', reply_markup=ReplyKeyboardRemove())
    await message.answer_photo(photo=photo)
    await message.answer(text='–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥:', reply_markup=select_service_kb)
    
@user_router.message(F.text.lower() == '–∑–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É')
async def sell_servic(message: types.Message):
    await message.answer(text='–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥:', reply_markup=select_service_kb)

@user_router.message(F.text.lower() == '–ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ–µ–π –∑–∞–ø–∏—Å–∏' or Command(commands='my_service'))
async def my_select_service(message: types.Message):
    usluga = await show_info(message.from_user.id, )
    await message.answer(text=f'–ú–æ–∏ –∑–∞–ø–∏—Å–∏:\n–£—Å–ª—É–≥–∞: {usluga[0]}\n–î–∞—Ç–∞: {usluga[1]}\n–í—Ä–µ–º—è: {usluga[2]}', reply_markup=my_sel_serv_kb)
